///USER CLASSES


User user = new User("John Doe", "123 Main Street", "johndoe@example.com", 1000, "ABC123"); ///create a new user object

///access and modify the user's details using the properties of the User 

string name = user.Name;
user.Balance += 500;

class User {
  // Personal details
  public string Name { get; set; }
  public string Address { get; set; }
  public string Email { get; set; }

  // Account details
  public decimal Balance { get; set; }
  public string AccountNumber { get; set; }

  // Constructor for creating a new user
  public User(string name, string address, string email, decimal balance, string accountNumber) {
    Name = name;
    Address = address;
    Email = email;
    Balance = balance;
    AccountNumber = accountNumber;
  }
}

user.AddMoney(500);///This will add 500 to the user's account balance

class User {
  // ... other properties and methods go here ...

  // Method for adding money to the user's account
  public void AddMoney(decimal amount) {
    Balance += amount;
  }
}

user.TransferMoney("XYZ789", 250);///This will transfer 250 from the user's account to the account with the number "XYZ789"

class User {
  // ... other properties and methods go here ...

  // Method for transferring money between accounts
  public void TransferMoney(string destinationAccountNumber, decimal amount) {
    // Check if the user has sufficient balance for the transfer
    if (Balance < amount) {
      Console.WriteLine("Insufficient balance for the transfer.");
      return;
    }

    // Transfer the money
    Balance -= amount;
    // Credit the amount to the destination account
    // You can add code here to find the destination account and credit the amount to it
  }
}

user.WithdrawMoney(100);///The method first checks if the user has sufficient balance for the withdrawal. If the balance 
///is insufficient, it prints an error message and returns. Otherwise, it subtracts the withdrawal amount from the user's balance.

class User {
  // ... other properties and methods go here ...

  // Method for withdrawing money from the user's account
  public void WithdrawMoney(decimal amount) {
    // Check if the user has sufficient balance for the withdrawal
    if (Balance < amount) {
      Console.WriteLine("Insufficient balance for the withdrawal.");
      return;
    }

    // Withdraw the money
    Balance -= amount;
  }
}

///This will create a new user with the given details and assign the User object to the user variable.
User user = User.SignUp("John Doe", "123 Main Street", "johndoe@example.com", 1000, "ABC123");

class User {
  // ... other properties and methods go here ...

  // Method for signing up a new user
  public static User SignUp(string name, string address, string email, decimal balance, string accountNumber) {
    return new User(name, address, email, balance, accountNumber);
  }
}

///API
[ApiController]
[Route("api/[controller]")]
public class TransferController : ControllerBase {
  [HttpPost]
  public IActionResult Transfer(string sourceAccountNumber, string destinationAccountNumber, decimal amount) {
    // Find the source and destination accounts
    // Perform the transfer
    // Return the result in the response
    return Ok(new { success = true });
  }
}

